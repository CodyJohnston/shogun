package main

import (
  "fmt"
  "net"
  "encoding/hex"
  "time"
)

func main() {
  var addr [257]net.UDPAddr
  var serv [257]*net.UDPConn
  for i := 0; i < 257; i++ {
    addr[i] = net.UDPAddr{
      Port: 9000+i,
      IP: net.ParseIP("127.0.0.1"),
    }
  }
  for i := 0; i < 257; i++ {
    serv[i], _ = net.ListenUDP("udp", &addr[i])
  }
  p := make([]byte, 1)
  fmt.Printf("Waiting to start...\n")
  var remoteaddr [257]*net.UDPAddr
  var err error
  fmt.Printf("Getting remote addresses...\n")
  for i := 0; i < 257; i++ {
    _, remoteaddr[i], err = serv[i].ReadFromUDP(p)
    if i == 256 {
      fmt.Printf("Sending file to %v \n", remoteaddr[i])
    }
    if err !=  nil {
      fmt.Printf("Start read error  %v", err)
    }
  }
  hexBlob := "9eef9ea853e9cd6b876027c508907ad946daa5442560f36077ac9d3910a8e94b86841872cbcc2bb079a9ea35a199aca9b5bdc86f775c9b1af91df8e59a1ce0f4bf73341ed76bae9d2aa229a6bde6e797d727110535a92b6a99a0bbfd5de66be81adac3dac9f537f08c88f976b4aa54758fac1c059d17d4d8c63f0ecbb54b15f822c45fe95fc4fe13bc40acfeacd7b5f9c460e463811bb69cbeb9bab7ca81646c43de72aaeda3855bbc6fc372224efe3dff3a0e2ab7bbd3eb8d3e68f2720b92bb8b73b1dc31324bab94135b465951ff9378e1df8655a8fb303d72390d61d5f12fb275af7612d8ba3c20285460be31c297d2e67984c6ee7463835455cb1b912e70c9b2d885f20b7da26e30efec8f10a478435fe12f19e9883a8c8097fc13c98ce96268df693d556e6f956217f39ac4bb69433fcc34c5dcc6ca6f3ec5099c51a1a289dbf982ba55b413ce68e6c8d5d57b60605eff33afbff8f410b7c31e3eb0ce76ce6aa9ec56e3809b3b6088c568e2b4d63abf14d939dbcda736b4f9f384ea30f7620f0e920fac71d2573af5f4c51ba9841935876e25fc9f80a11d2985b6186bb2e43a9775a26e6916b44d30a6f05a05fb4b8f4b6a40d13a242e1b1924c56bfd4da3e9cbd9cafebd77536d12a673f3fe26bb85c6e26dccb04ee3a743e6236dc5277ed25cce020216c4d5310ce94f625ce044903db8b408f721d18eff6cdd582c675d6d7b754ad8fa54a9253adc21ecf9f75e581800e37536e708696afae35892e9857bc852b0ac41030dde8dd436f7d057d308e91191562308938218acdc42a3b92fe69f02bac2b5cf0d7e869f378b5cc4f6a1a4bf54d880d281d8f19230b15b5c4c65215f40cefa11ebb61c12742233fb0402acab131e32457163eeb45a7a052183fabc8ac7a32b3b325801af82010d0c4b15c04b83d2b812ee0fb512bcc407e48085e483e5079571604356a06dbf8bc6733b67a22eae0e20ebfa860c442e56f00d81ba29fa526950111acfe100859ee8de388a6edc56d0e56c2373f5ccb9111b166b26e527b33d621508e1f0010be7be81e916e0e1b253b9b4d56125daaf61f76ccbfce54a7f7f665362de8d3ce965201055ed61fcf9ba78dd9548f2ff7fec18e9c71be96b3701b24f3af8da81a12d155fc27a7e42fc3a77ceed928562b27d5af171ec69e254ddce5515987a14056516084f1fc7ee766566484681a6e893a36f17b66eac220b2d142571f6209727e365c7dd82d00c276965350a91ed7453fe182fe9c3ae1cee9aab509394720fff61d112adcf8ba31158783d45c887d3f6701449ea1ff66f80d44a58381552a8cb9288b9579d6fc7520f2a378582e66dd5adfdc302e1b1241e256605dddfa2de7aba2cdda4ba63a222223532877655e9eedecde96342d8adf6bd2583ceb1c34831897dc7df65f837e0d5c0417ae41f742f06c4e2e8a83de240d48332c82cbfff255aee2a831e7a6e9d1ec962bb1f104fac1ed17fe78e2c3bfecdc7a2078190b40b52ba17761e0f380977d316fd251ab886b10c884884bea1a8224e2b9e28899872d4cf2407a30a646463b7a630da1e3d6b21e417390967bc16c6899be0012bac1b024463f6c372d8d7126e2452827fd7ef308f93aa736698a18856ee4579b05c456be53b81da2967dca9d5f65aafd54b815a16697855bf8c7106cd86248efd5b221847f43ab2d1e3466eb7deaf8c2ca695f7c1320b2008be796ecfb2673d9526d5333068a1aaa8b9f960ba3796843cd5be51847e361d8846aab8f626973cc878d83c97bce9bef3bb48aef5788f4d33bede3dbd803d171dcbf3f811edd7967cfa63365a8cf0a9ffd00fec6a9af052e4aeff2f1bc2007ea3996cc5ac6bca736bb51fe7a38fb2084e00bcfbb6cb350d7cc3328cd08a505a355ce2e4bcc92b182d51fdb3fe7329f4da801393658323631035aaa968fa5831d8445eb691f4727beea38f9d850ed6215756cefaecd93b6f650e9cb879fbceb25baf3fb51dd292d8f0fe8622ba8cc10f81830df8654b5ca92cdbc3f4bf6c0de84faa70c4dc36a05dc19cdec74d8d3340e52073aec5a467892add4892fd9bc11229d71926e7f22e79b0db02ae1e79dc942542ec07e9656f8b0d078a5bbefc4c2c07b22705653831a1b6a5be042a8003c7b3beb41c81676fb157aa3afe668b4381ac755458ae78a5995ffc77eb7328d7a2eca9cb78cc1d6dbe2266e49b224e50a547458aaf85e96a3f3c5e921ef9d560efdef004063f06003a4bd0806cebcdb3b2de2b9f5a3d4e1cb9bd5e0fa19d1c9c097b9ec5edc8785c897056fe2b9d7dd7a6466cbf5b43026a2f999d9d6cea11686b2ede8c353b83cf670c49d986f9c405b07fbfa4adeab9caaa2788fb093457dc742773d192e410c1d8aae2d4efc512fcd77a7233a00e94994913305e1469f918296298bf82154b466c7e4ba78b830247f94cdc4408f20f28fc48c7487e0fab97f1564bf2497027cad1837c58eadba16158ac98aedff91602e9059d9bf9f561ad07a5ef5180c0380bf57bbf14bf6fd69dd9af62a35fa9a8f18280856beb7d74188b03b31a58fbe4154488f56d473eb470af320cf24362b4b82428a09c5fc0d33c8ef18ffa7d026949c59fd5cd4fe1487e052ff6aa9f1885cd33c757e8fd9567c159f2d90254d8d56df58d0c0fa6bd39e6d7a5181690243b75e579843b4795694bcad5f6ab7e9e8f5d1c9d2511c8edc8e92da032964a5d9c463e7c914d1523a416a1bf7b4c3ac2a95f9ee9ddc6856e7aa29abdae95ebc0d6d9044dbf84f8c72cf67d97a691d2c1b3d489da667cb6ba67619c01128c550fd98f462b71f3feb61b8bcea16869264330b7b97ba30706a6fd19d482098fa5ee09b65b3c3b4adf11422f30b333fc6f47c0fdc9bf553e1d5a"
  var blob []byte = hexToByte([]byte(hexBlob))
  for i := 0; i < len(blob); i++ {
    v := int(blob[i])
    writer(serv[v], remoteaddr[v])
  }
  writer(serv[256], remoteaddr[256])
}

func writer(conn *net.UDPConn, addr *net.UDPAddr) {
  time.Sleep(10*time.Millisecond)
  _, err := conn.WriteToUDP([]byte(""), addr)
  if err != nil {
   fmt.Printf("Couldn't send byte %v", err)
  }
}

func hexToByte(src []byte) []byte {
	dst := make([]byte, hex.DecodedLen(len(src)))
	hex.Decode(dst, src)
	return dst
}
